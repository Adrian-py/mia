{"version":3,"sources":["images/Juanda.jpg","images/1.gif","images/2.gif","images/3.gif","components/Header.js","components/buttons.js","components/Navbar.js","components/Wali.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Component","Buttons","to","Navbar","Wali","src","Pic","alt","Gif1","Gif2","Gif3","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B,6MCEtBC,E,uKAEb,OACI,yBAAKC,UAAU,UACX,uBAAGA,UAAU,OAAb,MACA,uBAAGA,UAAU,QAAb,SACA,uBAAGA,UAAU,WAAb,sB,GANoBC,aCCfC,E,uKAEb,OACI,yBAAKF,UAAU,QACX,kBAAC,IAAD,CAAMA,UAAU,OAAOG,GAAG,QAA1B,QACA,kBAAC,IAAD,CAAMH,UAAU,UAAUG,GAAG,kBAA7B,cACA,kBAAC,IAAD,CAAMH,UAAU,SAASG,GAAG,QAA5B,a,GANqBF,aCAhBG,E,uKAEb,OACI,yBAAKJ,UAAU,gBACX,kBAAC,EAAD,W,GAJoBC,a,oECIfI,E,uKAEb,OACI,yBAAKL,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKM,IAAKC,IAAKC,IAAI,OAAOR,UAAU,YACpC,uBAAGA,UAAU,YAAb,0BACA,uBAAGA,UAAU,YAAb,2BACA,yBAAKM,IAAKG,IAAMD,IAAI,OAAOR,UAAU,SACrC,yBAAKM,IAAKI,IAAMF,IAAI,OAAOR,UAAU,SACrC,yBAAKM,IAAKK,IAAMH,IAAI,OAAOR,UAAU,e,GAVvBC,a,MCoBnBW,MAlBf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,EAAD,MACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,QAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,kBAChB,kBAAC,EAAD,WCPQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cb36bb50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Juanda.f4c6c58f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.45e19a55.gif\";","module.exports = __webpack_public_path__ + \"static/media/2.0b500e63.gif\";","module.exports = __webpack_public_path__ + \"static/media/3.408f4dc7.gif\";","import React, {Component} from 'react';\r\n\r\nexport default class Header extends Component{\r\n    render(){\r\n        return(\r\n            <div className='header'>\r\n                <p className='num'>12</p> \r\n                <p className='MIA1'>MIA 1</p>\r\n                <p className='tagline'>Class of 2020</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class Buttons extends Component{\r\n    render(){\r\n        return(\r\n            <div className='btns'>\r\n                <Link className='home' to='/mia'>Home</Link>\r\n                <Link className='walibtn' to='/mia/WaliKelas'>Wali Kelas</Link>\r\n                <Link className='Photos' to='/mia'>Foto</Link>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Buttons from './buttons';\r\n\r\nexport default class Navbar extends Component{\r\n    render(){\r\n        return(\r\n            <div className='navContainer'>\r\n                <Buttons/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nimport Pic from '../images/Juanda.jpg';\r\nimport Gif1 from '../images/1.gif';\r\nimport Gif2 from '../images/2.gif'; \r\nimport Gif3 from '../images/3.gif'; \r\n\r\nexport default class Wali extends Component{\r\n    render(){\r\n        return(\r\n            <div className='Container'>\r\n                <div className='wali'>\r\n                    <img src={Pic} alt='wali' className='picwali'/>\r\n                    <p className='namaWali'> Bapak Juanda Naiborhu</p>\r\n                    <p className='descWali'>Wali Kelas | Guru Kimia</p>\r\n                    <img src={Gif1} alt='gif1' className='gif1'></img>\r\n                    <img src={Gif2} alt='gif2' className='gif2'></img>\r\n                    <img src={Gif3} alt='gif3' className='gif3'></img>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport Header from './components/Header';\nimport Navbar from './components/Navbar';\nimport Wali from './components/Wali';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n      <Navbar/>\n        <Switch>\n          <Route exact path='/mia'>\n            <Header/>\n          </Route>\n          <Route exact path='/mia/WaliKelas'>\n            <Wali/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}